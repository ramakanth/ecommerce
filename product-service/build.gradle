plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'com.poc.opensource'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
ext {
	set('springCloudVersion', "Hoxton.SR5")
	mapstructVersion = "1.3.1.Final"
}
configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationImplementation.extendsFrom testImplementation
	integrationRuntimeOnly.extendsFrom testRuntimeOnly
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
   }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.modelmapper:modelmapper:2.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.modelmapper:modelmapper:2.3.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude(group: 'junit', module: 'junit')
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:2.28.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
sourceSets {
	
		test {
			java.srcDirs = ['src/test/java']
			resources.srcDirs = ['src/test/resources']
		}
	
		integration {
			java.srcDirs = ['src/integration/java']
			resources.srcDirs = ['src/integration/resources']
			compileClasspath += sourceSets.main.output + sourceSets.test.output
			runtimeClasspath += sourceSets.main.output + sourceSets.test.output
		}
	}
task integration(type:Test, description: 'Integration testing of API', group:'Verification') {
	testClassesDirs = sourceSets.integration.output.classesDirs
	classpath = sourceSets.integration.runtimeClasspath
	outputs.upToDateWhen {false}
	useJUnitPlatform(){
		failFast = true
	}
}
test {
	maxHeapSize = '1024m'
	useJUnitPlatform()
}
build.dependsOn integration
integration.mustRunAfter test
